<?php

namespace Tests\Unit;

use App\Models\Base\District;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;
use App\Repositories\Base\SchoolRepository;
use App\Models\Base\School;


class SchoolTest extends TestCase
{
    use WithFaker;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->artisan('migrate');
    }

    public function test_all(){
        // Data preparation
        factory(School::class, 5)->create();

        // Operations
        $repository = new SchoolRepository;
        $resp = $repository->all();

        // Control
        $this->assertInstanceOf('Illuminate\Database\Eloquent\Collection', $resp->getData());
        $this->assertTrue($resp->getResult());
        $this->assertNull($resp->getError());
    }

    public function test_get(){
        // Data preparation
        $model = factory(School::class)->create();

        // Operations
        $repository = new SchoolRepository;
        $resp = $repository->get($model->id);

        // Control
        $this->assertInstanceOf('App\Models\Base\School', $resp->getData());
        $this->assertEquals($model->district_id, $resp->getData()->district_id);
        $this->assertEquals($model->name, $resp->getData()->name);
        $this->assertEquals($model->address, $resp->getData()->address);
        $this->assertTrue($resp->getResult());
        $this->assertNull($resp->getError());
    }

    public function test_get_by_manager_reference_code(){
        // Data preparation
        $model = factory(School::class)->create();

        // Operations
        $repository = new SchoolRepository;
        $resp = $repository->getByManagerReferenceCode($model->manager_reference_code);

        // Control
        $this->assertInstanceOf('App\Models\Base\School', $resp->getData());
        $this->assertTrue($resp->getResult());
        $this->assertNull($resp->getError());
        $this->assertEquals($model->id, $resp->getData()->id);
    }

    public function test_get_by_student_reference_code(){
        // Data preparation
        $model = factory(School::class)->create();

        // Operations
        $repository = new SchoolRepository;
        $resp = $repository->getByStudentReferenceCode($model->student_reference_code);

        // Control
        $this->assertInstanceOf('App\Models\Base\School', $resp->getData());
        $this->assertTrue($resp->getResult());
        $this->assertNull($resp->getError());
        $this->assertEquals($model->id, $resp->getData()->id);
    }

    public function test_get_by_instructor_reference_code(){
        // Data preparation
        $model = factory(School::class)->create();

        // Operations
        $repository = new SchoolRepository;
        $resp = $repository->getByInstructorReferenceCode($model->instructor_reference_code);

        // Control
        $this->assertInstanceOf('App\Models\Base\School', $resp->getData());
        $this->assertTrue($resp->getResult());
        $this->assertNull($resp->getError());
        $this->assertEquals($model->id, $resp->getData()->id);
    }

    public function test_create(){
        // Data preparation
        $district = factory(District::class)->create();
        $data = [
            'district_id' => $district->id,
            'name' => $this->faker->company,
            'address' => $this->faker->address,
        ];

        // Operations
        $repository = new SchoolRepository;
        $resp = $repository->create($data);

        // Control
        $this->assertInstanceOf('App\Models\Base\School', $resp->getData());
        $this->assertEquals($data['district_id'], $resp->getData()->district_id);
        $this->assertEquals($data['name'], $resp->getData()->name);
        $this->assertEquals($data['address'], $resp->getData()->address);
        //$this->assertTrue($resp->getData()->active);
        $this->assertTrue($resp->getResult());
        $this->assertNull($resp->getError());
    }

    public function test_update(){
        // Data preparation
        $model = factory(School::class)->create();
        $district = factory(District::class)->create();
        $data = [
            'district_id' => $district->id,
            'name' => $this->faker->company,
            'address' => $this->faker->address,
        ];

        // Operations
        $repository = new SchoolRepository;
        $resp = $repository->update($model->id, $data);

        // Control
        $this->assertInstanceOf('App\Models\Base\School', $resp->getData());
        $this->assertEquals($data['district_id'], $resp->getData()->district_id);
        $this->assertEquals($data['name'], $resp->getData()->name);
        $this->assertEquals($data['address'], $resp->getData()->address);
        $this->assertTrue($resp->getResult());
        $this->assertNull($resp->getError());
    }

    public function test_delete(){
        // Data preparation
        $model = factory(School::class)->create();

        // Operations
        $repository = new SchoolRepository;
        $resp = $repository->delete($model->id);

        // Control
        $this->assertTrue($resp->getResult());
        $this->assertNull($resp->getData());
        $this->assertNull($resp->getError());
        $this->assertNull(School::find($model->id));
    }

    public function test_set_active(){
        // Data preparation
        $model = factory(School::class)->create(['active' => false]);

        // Operations
        $repository = new SchoolRepository;
        $resp = $repository->setActive($model->id);

        // Control
        $this->assertTrue($resp->getResult());
        $this->assertNull($resp->getError());
        $this->assertTrue($resp->getData()->active);
    }

    public function test_set_passive(){
        // Data preparation
        $model = factory(School::class)->create();

        // Operations
        $repository = new SchoolRepository;
        $resp = $repository->setPassive($model->id);

        // Control
        $this->assertTrue($resp->getResult());
        $this->assertNull($resp->getError());
        $this->assertFalse($resp->getData()->active);
    }
}
