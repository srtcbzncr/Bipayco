<?php

namespace Tests\Unit;

use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;
use App\Repositories\Base\SchoolRepository;
use App\Models\Base\School;


class SchoolTest extends TestCase
{
    use WithFaker;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        //$this->artisan('migrate');
    }

    public function test_all(){
        // Data preparation
        factory(School::class, 5)->create();

        // Operations
        $schoolRepository = new SchoolRepository;
        $resp = $schoolRepository->all();

        // Control
        $this->assertInstanceOf('Illuminate\Database\Eloquent\Collection', $resp->getData());
        $this->assertTrue($resp->getResult());
        $this->assertNull($resp->getError());
    }

    public function test_get(){
        // Data preparation
        $school = factory(School::class)->create();

        // Operations
        $schoolRepository = new SchoolRepository;
        $resp = $schoolRepository->get($school->id);

        // Control
        $this->assertInstanceOf('App\Models\Base\SocialMedia', $resp->getData());
        $this->assertEquals($socialMedia->name, $resp->getData()->name);
        $this->assertEquals($socialMedia->symbol, $resp->getData()->symbol);
        Storage::assertExists($resp->getData()->symbol);
        $this->assertTrue($resp->getResult());
        $this->assertNull($resp->getError());
    }

    public function test_create(){
        // Data preparation
        $file = UploadedFile::fake()->image('deneme.jpg');
        $data = [
            'symbol' => $file,
            'name' => $this->faker->company,
        ];

        // Operations
        $socialMediaRepository = new SocialMediaRepository;
        $resp = $socialMediaRepository->create($data);

        // Control
        $this->assertInstanceOf('App\Models\Base\SocialMedia', $resp->getData());
        $this->assertEquals($data["name"], $resp->getData()->name);
        Storage::assertExists($resp->getData()->symbol);
        $this->assertTrue($resp->getResult());
        $this->assertNull($resp->getError());
    }

    public function test_update(){
        // Data preparation
        $socialMedia = factory(SocialMedia::class)->create();
        $data = [
            'name' => $this->faker->company,
        ];

        // Operations
        $socialMediaRepository = new SocialMediaRepository;
        $resp = $socialMediaRepository->update($socialMedia->id, $data);

        // Control
        $this->assertInstanceOf('App\Models\Base\SocialMedia', $resp->getData());
        $this->assertEquals($data['name'], $resp->getData()->name);
        $this->assertTrue($resp->getResult());
        $this->assertNull($resp->getError());
    }

    public function test_update_symbol(){
        // Data preparation
        $socialMedia = factory(SocialMedia::class)->create();
        $file = UploadedFile::fake()->image('deneme.jpg');
        $data = [
            'symbol' => $file,
        ];

        // Operations
        $socialMediaRepository = new SocialMediaRepository;
        $resp = $socialMediaRepository->updateSymbol($socialMedia->id, $data);

        // Control
        $this->assertInstanceOf('App\Models\Base\SocialMedia', $resp->getData());
        Storage::assertMissing($socialMedia->symbol);
        Storage::assertExists($resp->getData()->symbol);
    }

    public function test_delete(){
        // Data preparation
        $socialMedia = factory(SocialMedia::class)->create();

        // Operations
        $socialMediaRepository = new SocialMediaRepository;
        $resp = $socialMediaRepository->delete($socialMedia->id);

        // Control
        $this->assertTrue($resp->getResult());
        $this->assertNull($resp->getData());
        $this->assertNull($resp->getError());
        $this->assertNull(SocialMedia::find($socialMedia->id));
        Storage::assertMissing($socialMedia->symbol);
    }

    public function test_set_active(){
        // Data preparation
        $socialMedia = factory(SocialMedia::class)->create(['active' => false]);

        // Operations
        $socialMediaRepository = new SocialMediaRepository;
        $resp = $socialMediaRepository->setActive($socialMedia->id);

        // Control
        $this->assertTrue($resp->getResult());
        $this->assertNull($resp->getError());
        $this->assertTrue($resp->getData()->active);
    }

    public function test_set_passive(){
        // Data preparation
        $socialMedia = factory(SocialMedia::class)->create();

        // Operations
        $socialMediaRepository = new SocialMediaRepository;
        $resp = $socialMediaRepository->setPassive($socialMedia->id);

        // Control
        $this->assertTrue($resp->getResult());
        $this->assertNull($resp->getError());
        $this->assertFalse($resp->getData()->active);
    }
}
