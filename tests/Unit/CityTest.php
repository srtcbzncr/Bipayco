<?php

namespace Tests\Unit;

use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;
use App\Models\Base\City;
use App\Repositories\Base\CityRepository;
use App\Models\Base\Country;

class CityTest extends TestCase
{
    use WithFaker;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        //$this->artisan('migrate');
    }

    public function test_all(){
        // Data preparation
        factory(City::class, 5)->create();

        // Operations
        $repository = new CityRepository;
        $resp = $repository->all();

        // Control
        $this->assertInstanceOf('Illuminate\Database\Eloquent\Collection', $resp->getData());
        $this->assertTrue($resp->getResult());
        $this->assertNull($resp->getError());
    }

    public function test_get(){
        // Data preparation
        $model = factory(City::class)->create();

        // Operations
        $repository = new CityRepository;
        $resp = $repository->get($model->id);

        // Control
        $this->assertInstanceOf('App\Models\Base\City', $resp->getData());
        $this->assertEquals($model->country_id, $resp->getData()->country_id);
        $this->assertEquals($model->code, $resp->getData()->code);
        $this->assertEquals($model->name, $resp->getData()->name);
        $this->assertTrue($resp->getData()->active);
        $this->assertTrue($resp->getResult());
        $this->assertNull($resp->getError());
    }

    public function test_create(){
        // Data preparation
        $country = factory(Country::class)->create;
        $data = [
            'country_id' => $country->id,
            'code' => $this->faker->postcode,
            'name' => $this->faker->city,
        ];

        // Operations
        $repository = new CityRepository;
        $resp = $repository->create($data);

        // Control
        $this->assertInstanceOf('App\Models\Base\City', $resp->getData());
        $this->assertEquals($data['country_id'], $resp->getData()->country_id);
        $this->assertEquals($data['code'], $resp->getData()->code);
        $this->assertEquals($data['name'], $resp->getData()->name);
        $this->assertTrue($resp->getData()->active);
        $this->assertTrue($resp->getResult());
        $this->assertNull($resp->getError());
    }

    public function test_update(){
        // Data preparation
        $model = factory(City::class)->create();
        $country = factory(Country::class)->create();
        $data = [
            'country_id' => $country->id,
            'code' => $this->faker->postcode,
            'name' => $this->faker->company,
        ];

        // Operations
        $repository = new CityRepository;
        $resp = $repository->update($model->id, $data);

        // Control
        $this->assertInstanceOf('App\Models\Base\City', $resp->getData());
        $this->assertEquals($data['country_id'], $resp->getData()->country_id);
        $this->assertEquals($data['code'], $resp->getData()->code);
        $this->assertEquals($data['name'], $resp->getData()->name);
        $this->assertTrue($resp->getResult());
        $this->assertNull($resp->getError());
    }

    public function test_delete(){
        // Data preparation
        $model = factory(City::class)->create();

        // Operations
        $repository = new CityRepository;
        $resp = $repository->delete($model->id);

        // Control
        $this->assertTrue($resp->getResult());
        $this->assertNull($resp->getData());
        $this->assertNull($resp->getError());
        $this->assertNull(City::find($model->id));
    }

    public function test_set_active(){
        // Data preparation
        $model = factory(City::class)->create(['active' => false]);

        // Operations
        $repository = new CityRepository;
        $resp = $repository->setActive($model->id);

        // Control
        $this->assertTrue($resp->getResult());
        $this->assertNull($resp->getError());
        $this->assertTrue($resp->getData()->active);
    }

    public function test_set_passive(){
        // Data preparation
        $model = factory(City::class)->create();

        // Operations
        $repository = new CityRepository;
        $resp = $repository->setPassive($model->id);

        // Control
        $this->assertTrue($resp->getResult());
        $this->assertNull($resp->getError());
        $this->assertFalse($resp->getData()->active);
    }
}
