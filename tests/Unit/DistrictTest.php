<?php

namespace Tests\Unit;

use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;
use App\Models\Base\District;
use App\Repositories\Base\DistrictRepository;
use App\Models\Base\City;

class DistrictTest extends TestCase
{
    use WithFaker;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        //$this->artisan('migrate');
    }

    public function test_all(){
        // Data preparation
        factory(District::class, 5)->create();

        // Operations
        $repository = new DistrictRepository;
        $resp = $repository->all();

        // Control
        $this->assertInstanceOf('Illuminate\Database\Eloquent\Collection', $resp->getData());
        $this->assertTrue($resp->getResult());
        $this->assertNull($resp->getError());
    }

    public function test_get(){
        // Data preparation
        $model = factory(District::class)->create();

        // Operations
        $repository = new DistrictRepository;
        $resp = $repository->get($model->id);

        // Control
        $this->assertInstanceOf('App\Models\Base\District', $resp->getData());
        $this->assertEquals($model->city_id, $resp->getData()->city_id);
        $this->assertEquals($model->name, $resp->getData()->name);
        $this->assertTrue($resp->getData()->active);
        $this->assertTrue($resp->getResult());
        $this->assertNull($resp->getError());
    }

    public function test_create(){
        // Data preparation
        $city = factory(City::class)->create;
        $data = [
            'city_id' => $city->id,
            'name' => $this->faker->city,
        ];

        // Operations
        $repository = new DistrictRepository;
        $resp = $repository->create($data);

        // Control
        $this->assertInstanceOf('App\Models\Base\District', $resp->getData());
        $this->assertEquals($data['city_id'], $resp->getData()->city_id);
        $this->assertEquals($data['name'], $resp->getData()->name);
        $this->assertTrue($resp->getData()->active);
        $this->assertTrue($resp->getResult());
        $this->assertNull($resp->getError());
    }

    public function test_update(){
        // Data preparation
        $model = factory(District::class)->create();
        $city = factory(City::class)->create();
        $data = [
            'city_id' => $city->id,
            'name' => $this->faker->company,
        ];

        // Operations
        $repository = new DistrictRepository;
        $resp = $repository->update($model->id, $data);

        // Control
        $this->assertInstanceOf('App\Models\Base\District', $resp->getData());
        $this->assertEquals($data['city_id'], $resp->getData()->city_id);
        $this->assertEquals($data['name'], $resp->getData()->name);
        $this->assertTrue($resp->getResult());
        $this->assertNull($resp->getError());
    }

    public function test_delete(){
        // Data preparation
        $model = factory(District::class)->create();

        // Operations
        $repository = new DistrictRepository;
        $resp = $repository->delete($model->id);

        // Control
        $this->assertTrue($resp->getResult());
        $this->assertNull($resp->getData());
        $this->assertNull($resp->getError());
        $this->assertNull(District::find($model->id));
    }

    public function test_set_active(){
        // Data preparation
        $model = factory(District::class)->create(['active' => false]);

        // Operations
        $repository = new DistrictRepository;
        $resp = $repository->setActive($model->id);

        // Control
        $this->assertTrue($resp->getResult());
        $this->assertNull($resp->getError());
        $this->assertTrue($resp->getData()->active);
    }

    public function test_set_passive(){
        // Data preparation
        $model = factory(District::class)->create();

        // Operations
        $repository = new DistrictRepository;
        $resp = $repository->setPassive($model->id);

        // Control
        $this->assertTrue($resp->getResult());
        $this->assertNull($resp->getError());
        $this->assertFalse($resp->getData()->active);
    }
}
